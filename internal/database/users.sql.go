// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (id,created_at,updated_at,email,hashed_password)
values(
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUsersParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUsers, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserPass = `-- name: GetUserPass :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE email = $1
`

func (q *Queries) GetUserPass(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserPass, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const updateUserEmailAndPass = `-- name: UpdateUserEmailAndPass :one
UPDATE users 
SET email = $1, hashed_password = $2
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUserEmailAndPassParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) UpdateUserEmailAndPass(ctx context.Context, arg UpdateUserEmailAndPassParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailAndPass, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeUserToRed = `-- name: UpgradeUserToRed :exec
UPDATE users 
SET is_chirpy_red = true
WHERE id = $1
`

func (q *Queries) UpgradeUserToRed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, upgradeUserToRed, id)
	return err
}
